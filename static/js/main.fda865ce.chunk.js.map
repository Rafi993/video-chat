{"version":3,"sources":["ConnectionType.js","Connection.js","App.js","serviceWorker.js","index.js"],"names":["ConnectionType","setConnectionType","className","onClick","Connection","startChatting","user1Id","user2Id","setUser2Id","useState","otherUserId","setOtherUserId","handleOtherUserId","useCallback","event","target","value","handleSubmit","preventDefault","onSubmit","type","spellCheck","readOnly","onChange","required","peer","App","connectionType","chatting","setUser1Id","error","setError","useEffect","navigator","getUserMedia","video","audio","stream","SimplePeer","initiator","trickle","on","data","JSON","stringify","otherUserStream","document","getElementById","srcObject","play","err","console","log","handleChat","signal","parse","id","Boolean","window","location","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAsBeA,EApBQ,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBACxB,OACE,yBAAKC,UAAU,kBACb,8CACA,4BACEA,UAAU,gBACVC,QAAS,kBAAMF,EAAkB,mBAFnC,wBAMA,4BACEC,UAAU,gBACVC,QAAS,kBAAMF,EAAkB,wBAFnC,8BCuCSG,EAjDI,SAAC,GAMd,EALJH,kBAKK,IAJLI,EAII,EAJJA,cACAC,EAGI,EAHJA,QAGI,KAFJC,QAEI,EADJC,WAEsCC,mBAAS,KAD3C,mBACGC,EADH,KACgBC,EADhB,KAGEC,EAAoBC,uBACxB,SAAAC,GACEH,EAAeG,EAAMC,OAAOC,SAE9B,CAACL,IAGGM,EAAeJ,uBACnB,SAAAC,GACEA,EAAMI,iBACNb,MAEF,CAACA,IAGH,OACE,0BAAMH,UAAU,aAAaiB,SAAUF,GACrC,yBAAKf,UAAU,aACb,uCACA,2BAAOkB,KAAK,OAAOJ,MAAOV,EAASe,YAAY,EAAOC,UAAQ,KAGhE,yBAAKpB,UAAU,aACb,4CACA,2BACEkB,KAAK,OACLJ,MAAON,EACPa,SAAUX,EACVS,YAAY,EACZG,UAAQ,KAIZ,4BAAQJ,KAAK,SAASlB,UAAU,iBAAhC,aCtCFuB,EAAO,KAuEIC,EArEH,WAAM,MAG4BjB,mBAAS,MAHrC,mBAGTkB,EAHS,KAGO1B,EAHP,OAIkBQ,oBAAS,GAJ3B,mBAITmB,EAJS,KAICvB,EAJD,OAKcI,mBAAS,IALvB,mBAKTH,EALS,KAKAuB,EALA,OAMcpB,mBAAS,IANvB,mBAMTF,EANS,KAMAC,EANA,OAOUC,mBAAS,MAPnB,mBAOTqB,EAPS,KAOFC,EAPE,KAShBC,qBAAU,WACRC,UAAUC,aACR,CACEC,OAAO,EACPC,OAAO,IAET,SAAAC,IACEZ,EAAO,IAAIa,IAAW,CACpBC,UAA8B,kBAAnBZ,EACXa,SAAS,EACTH,YAGGI,GAAG,UAAU,SAAAC,GAChBb,EAAWc,KAAKC,UAAUF,OAG5BjB,EAAKgB,GAAG,UAAU,SAAAI,GAChB,IAAMV,EAAQW,SAASC,eAAe,SACtCZ,EAAMa,UAAYH,EAClBV,EAAMc,UAGRxB,EAAKgB,GAAG,SAAS,SAAAS,GAAG,OAAInB,EAAS,0CAEnC,SAAAD,GACEqB,QAAQC,IAAItB,GACZC,EAAS,0CAGZ,CAACJ,EAAgBE,EAAYE,IAEhC,IAAMsB,EAAaxC,uBAAY,WAC7BR,GAAc,GACdoB,EAAK6B,OAAOX,KAAKY,MAAMhD,MACtB,CAACA,EAASF,IAEb,OACE,yBAAKH,UAAU,QACC,IAAb0B,GAAyC,OAAnBD,GACrB,kBAAC,EAAD,CAAgB1B,kBAAmBA,KAGvB,IAAb2B,GAAyC,OAAnBD,GACrB,kBAAC,EAAD,CACE1B,kBAAmBA,EACnBI,cAAegD,EACf/C,QAASA,EACTC,QAASA,EACTC,WAAYA,IAIfoB,GAAY,2BAAO4B,GAAG,UAEtB1B,GAAS,4BAAKA,KC5DD2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASC,eAAe,SD6H3C,kBAAmBd,WACrBA,UAAU+B,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fda865ce.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ConnectionType = ({ setConnectionType }) => {\n  return (\n    <div className=\"connectionType\">\n      <h2>Start Chatting</h2>\n      <button\n        className=\"buttonOutline\"\n        onClick={() => setConnectionType(\"newConnection\")}\n      >\n        Start New Connection\n      </button>\n      <button\n        className=\"buttonOutline\"\n        onClick={() => setConnectionType(\"existingConnection\")}\n      >\n        Join Existing Connection\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectionType;\n","import React, { useCallback, useState } from \"react\";\n\nconst Connection = ({\n  setConnectionType,\n  startChatting,\n  user1Id,\n  user2Id,\n  setUser2Id\n}) => {\n  const [otherUserId, setOtherUserId] = useState(\"\");\n\n  const handleOtherUserId = useCallback(\n    event => {\n      setOtherUserId(event.target.value);\n    },\n    [setOtherUserId]\n  );\n\n  const handleSubmit = useCallback(\n    event => {\n      event.preventDefault();\n      startChatting();\n    },\n    [startChatting]\n  );\n\n  return (\n    <form className=\"connection\" onSubmit={handleSubmit}>\n      <div className=\"formGroup\">\n        <h3>Your ID</h3>\n        <input type=\"text\" value={user1Id} spellCheck={false} readOnly />\n      </div>\n\n      <div className=\"formGroup\">\n        <h3>Other UserId</h3>\n        <input\n          type=\"text\"\n          value={otherUserId}\n          onChange={handleOtherUserId}\n          spellCheck={false}\n          required\n        />\n      </div>\n\n      <button type=\"submit\" className=\"buttonOutline\">\n        Connect\n      </button>\n    </form>\n  );\n};\n\nexport default Connection;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport SimplePeer from \"simple-peer\";\n\nimport ConnectionType from \"./ConnectionType\";\nimport Connection from \"./Connection\";\n\nlet peer = null;\n\nconst App = () => {\n  // Storing the state at root component like this will cause unwanted re-renders\n  // I'm doing it anyway for simplicity and the app does not have that much logic for now\n  const [connectionType, setConnectionType] = useState(null);\n  const [chatting, startChatting] = useState(false);\n  const [user1Id, setUser1Id] = useState(\"\");\n  const [user2Id, setUser2Id] = useState(\"\");\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    navigator.getUserMedia(\n      {\n        video: true,\n        audio: false\n      },\n      stream => {\n        peer = new SimplePeer({\n          initiator: connectionType === \"newConnection\",\n          trickle: false,\n          stream\n        });\n\n        peer.on(\"signal\", data => {\n          setUser1Id(JSON.stringify(data));\n        });\n\n        peer.on(\"stream\", otherUserStream => {\n          const video = document.getElementById(\"video\");\n          video.srcObject = otherUserStream;\n          video.play();\n        });\n\n        peer.on(\"error\", err => setError(\"Unable to use users video camera\"));\n      },\n      error => {\n        console.log(error);\n        setError(\"Unable to use users video camera2\");\n      }\n    );\n  }, [connectionType, setUser1Id, setError]);\n\n  const handleChat = useCallback(() => {\n    startChatting(true);\n    peer.signal(JSON.parse(user2Id));\n  }, [user2Id, startChatting]);\n\n  return (\n    <div className=\"app\">\n      {chatting === false && connectionType === null && (\n        <ConnectionType setConnectionType={setConnectionType} />\n      )}\n\n      {chatting === false && connectionType !== null && (\n        <Connection\n          setConnectionType={setConnectionType}\n          startChatting={handleChat}\n          user1Id={user1Id}\n          user2Id={user2Id}\n          setUser2Id={setUser2Id}\n        />\n      )}\n\n      {chatting && <video id=\"video\"></video>}\n\n      {error && <h3>{error}</h3>}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}